#linearsearch
n = int(input("enter the roll numbers:"))
s = []
for i in range (n):
  a = int(input("enter roll no:"))
  s.append(a)

def linearsearch(s, k):
  for i in range(n):
       if a[i]==k:
         return i
  return -1

key = int(input("enter the number to be found using linear:"))
l = linearsearch(s , key)
print("element is found at index:", l)

---------------------------------------------------------------------------
#sentinal
n = int(input("enter the roll numbers:"))
s = []
for i in range (n):
  a = int(input("enter roll no:"))
  s.append(a)

def SentinelSearch(arr , m):
  arr.append(m)
  index = 0

  while true: 
    if arr[c] == m:
      break
    c = c +1 
  return c

key2 = int(input("enter the number to be found using sentinel:"))
sentinal = SentinalSearch(s , key2)
print("element is found at index:", sentinal)

---------------------------------------------------------------------------

n =int(input("enter the numbers:"))
s = []
print("enter percentage:")
for i in range(n):
  s.append(int(input()))

def insertion_sort(s,n):
  for i in range(1,n):
   temp = s[i]
   j = i-1
  while(j>=0 and s[i]> temp):
    s[j+1] = s[j]
    j= j-1                                          #insertion
    arr[j+1]= temp
insertion_sort(s,n)
print(s)
---------------------------------------------------------------------------


#shell sort

n=int(input("Enter total number of students: "))
s=[]
for i in range(n):
    r=int(input(f"Enter roll number: "))
    s.append(r)
def shellsort(arr,n):
    gap=n//2
    while gap>0:
        for i in range(gap,n):
            temp=arr[i]
            j=i
            while(j>=gap and arr[j-gap]>temp):
                arr[j]=arr[j-gap]
                j=j-gap
            arr[j]=temp
        gap=gap//2
shellsort(s,len(s))
print("sorted numbers are: ",s)         
---------------------------------------------------------------------------

# Selection sort 

def selectionSort(arr, n):
  for i in range(size):
     min = i
     for j in range(i + 1, n):
       if arr[j] < arr[min]:
          min = j
          temp=arr[i]
          arr[i] = arr[min]
          arr[min]= temp

arr = []
n = int(input("enter no of students: "))
for i in range(n):
  s = input("percentage of students: ")
  arr.append(s)

selectionSort(arr,n)
print('Sorted Array in Ascending Order:')
print(arr)

output

enter no of students: 4
percentage of students: 20
percentage of students: 10
percentage of students: 60
percentage of students: 30
Sorted Array in Ascending Order:
['10', '20', '30', '60']
---------------------------------------------------------------------------


# Quick sort in Python

# function to find the partition position
def partition(array, low, high):

  # choose the rightmost element as pivot
  pivot = array[high]

  # pointer for greater element
  i = low - 1

  # traverse through all elements
  # compare each element with pivot
  for j in range(low, high):
    if array[j] <= pivot:
      # if element smaller than pivot is found
      # swap it with the greater element pointed by i
      i = i + 1

      # swapping element at i with element at j
      (array[i], array[j]) = (array[j], array[i])

  # swap the pivot element with the greater element specified by i
  (array[i + 1], array[high]) = (array[high], array[i + 1])

  # return the position from where partition is done
  return i + 1

# function to perform quicksort
def quickSort(array, low, high):
  if low < high:

    # find pivot element such that
    # element smaller than pivot are on the left
    # element greater than pivot are on the right
    pi = partition(array, low, high)

    # recursive call on the left of pivot
    quickSort(array, low, pi - 1)

    # recursive call on the right of pivot
    quickSort(array, pi + 1, high)


data = [8, 7, 2, 1, 0, 9, 6]
print("Unsorted Array")
print(data)

size = len(data)

quickSort(data, 0, size - 1)

print('Sorted Array in Ascending Order:')
print(data)

output-
Unsorted Array
[8, 7, 2, 1, 0, 9, 6]
Sorted Array in Ascending Order:
[0, 1, 2, 6, 7, 8, 9]
---------------------------------------------------------------------------
import random

def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length

    # Create Buckets
    buckets = [[] for i in range(length)]

    # Bucket Sorting   
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])

    # Sorting Individual Buckets  
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])


    # Flattening the Array
    result = []
    for i in range(length):
        result = result + buckets[i]
            
    return result


arr = [5, 4, 2, 7, 8, 55, 2, 1, 4, 5, 1, 2]
output = bucketSort(arr)
print(output)

output-
[1, 1, 2, 2, 2, 4, 4, 5, 5, 7, 8, 55]
